# This file is meant for local development/testing and NOT meant for production!
# The backend and frontend is built on startup so first run may take some time

version: "3"
services:
  frontend:
    depends_on:
      - backend
    image: node:13-alpine
    ports:
      - "3000:3000"
    working_dir: /app/client
    networks:
      - default
      - private
    environment:
      NODE_PROXY_HOST: "backend"
    entrypoint: >
      /bin/sh -c "
        npm install
        until [ -f /app/build/generated/graphql/schema.graphqls ]
        do
          sleep 5
          echo 'Waiting for GraphQL schema generated by backend...'
        done
        npm run generate
        npm start
      "
    volumes:
      - .:/app
  backend:
    depends_on:
      - postgres
      - docker
    image: gradle:jdk8
    restart: always
    working_dir: /home/gradle/project
    networks:
      - private
    volumes:
      - ".:/home/gradle/project"
      - "docker_certs:/certs"
    command: ./gradlew generateGraphqlSchema bootRun
    environment:
      CODE_FREAK_DOCKER_HOST: "https://docker:2376"
      CODE_FREAK_DOCKER_CA_CERT_PATH: "/certs/ca/cert.pem"
      CODE_FREAK_DOCKER_CLIENT_KEY_PATH: "/certs/client/key.pem"
      CODE_FREAK_DOCKER_CLIENT_CERT_PATH: "/certs/client/cert.pem"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres:5432/postgres"
      SPRING_DATASOURCE_USERNAME: "postgres"
      SPRING_DATASOURCE_DRIVERCLASSNAME: "org.postgresql.Driver"
      SPRING_JPA_DATABASEPLATFORM: "org.hibernate.dialect.PostgreSQLDialect"
  postgres:
    image: postgres
    restart: always
    networks:
      - private
    environment:
      - "POSTGRES_HOST_AUTH_METHOD=trust"
  docker:
    image: docker:stable-dind
    privileged: true
    restart: always
    environment:
      DOCKER_TLS_CERTDIR: certs
    networks:
      - private
    volumes:
      - docker_certs:/certs

volumes:
  docker_certs: {}

networks:
  private: {}
